// <auto-generated />
using System;
using InsuranceCompany.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InsuranceCompany.Storage.Migrations
{
    [DbContext(typeof(InsuranceCompanyDbContext))]
    [Migration("20241005080540_AddSeedFor_StatusAgentContract_Ikp_Agent")]
    partial class AddSeedFor_StatusAgentContract_Ikp_Agent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.AgentAgreementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int>("LOBId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("LOBId");

                    b.ToTable("AGENT_AGREEMENTS", (string)null);
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.AgentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DateBegin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FaceId")
                        .HasColumnType("integer");

                    b.Property<int>("IKPId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FaceId")
                        .IsUnique();

                    b.HasIndex("IKPId");

                    b.HasIndex("StatusId");

                    b.ToTable("AGENTS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBegin = new DateTimeOffset(new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateCreate = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateEnd = new DateTimeOffset(new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FaceId = 1,
                            IKPId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateBegin = new DateTimeOffset(new DateTime(2024, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateCreate = new DateTimeOffset(new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DateEnd = new DateTimeOffset(new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FaceId = 2,
                            IKPId = 2,
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Commission")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateBegin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateSign")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("InsuranceSum")
                        .HasColumnType("numeric");

                    b.Property<int?>("InsuredPersonId")
                        .HasColumnType("integer");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PolicyHolderId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("InsuredPersonId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PolicyHolderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CONTRACTS", (string)null);
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ContractRiskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("InsuranceSum")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("CONTRACT_RISKS", (string)null);
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.FaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("INN")
                        .HasColumnType("integer");

                    b.Property<string>("Lastname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FACES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBirth = new DateTime(1990, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Александр",
                            INN = 1234567890,
                            Lastname = "Иванов",
                            Name = "Александр Сергеевич Иванов",
                            SecondName = "Сергеевич",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            DateBirth = new DateTime(1985, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Мария",
                            INN = 1876543210,
                            Lastname = "Петрова",
                            Name = "Мария Викторовна Петрова",
                            SecondName = "Викторовна",
                            Type = 0
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.IKPEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("IKPS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Главный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Вспомогательный"
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.LOBEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("LOBS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "КАСКО"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ОСАГО"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Страхование путешественников"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Страхование от несчастных случаев"
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LOBId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LOBId");

                    b.ToTable("PRODUCTS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Description = "Гибкая система выбора нужных вам рисков и на требуемый срок",
                            Formula = "(P1+P2*M2S+P3*M3S)*M1I",
                            LOBId = 3,
                            Name = "отпуск вашй мечты"
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductMetafieldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_METAFIELDS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JsonData = "{\"Type\":1,\"Index\":1,\"Key\":\"M1I\",\"Description\":\"\\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0434\\u043D\\u0435\\u0439 \\u0432 \\u043F\\u0443\\u0442\\u0435\\u0448\\u0435\\u0441\\u0442\\u0432\\u0438\\u0435\"}",
                            ProductId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            JsonData = "{\"Type\":1,\"Values\":[{\"Name\":\"\\u0432\\u044B\\u0441\\u043E\\u043A\\u0438\\u0439\",\"Value\":1.2},{\"Name\":\"\\u043D\\u0438\\u0437\\u043A\\u0438\\u0439\",\"Value\":0.9}],\"Index\":2,\"Key\":\"M2S\",\"Description\":\"\\u041F\\u0435\\u0440\\u0438\\u043E\\u0434 \\u043E\\u0442\\u0434\\u044B\\u0445\\u0430\"}",
                            ProductId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            JsonData = "{\"Type\":1,\"Values\":[{\"Name\":\"\\u0415\\u0432\\u0440\\u043E\\u043F\\u0430\",\"Value\":1},{\"Name\":\"\\u0422\\u0443\\u0440\\u0446\\u0438\\u0439\",\"Value\":1.2},{\"Name\":\"\\u041E\\u0410\\u042D\",\"Value\":1.1}],\"Index\":3,\"Key\":\"M3S\",\"Description\":\"\\u041D\\u0430\\u043F\\u0440\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043F\\u043E\\u043B\\u0435\\u0442\\u0430\"}",
                            ProductId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductRiskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("InsuranceSum")
                        .HasColumnType("numeric");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PRODUCT_RISKS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            InsuranceSum = 500000m,
                            Key = "P1",
                            Name = "Несчастный случай",
                            Premium = 5000m,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            InsuranceSum = 10000m,
                            Key = "P2",
                            Name = "Утрата багажа",
                            Premium = 1000m,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            InsuranceSum = 20000m,
                            Key = "P3",
                            Name = "Задержка рейса",
                            Premium = 2000m,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.StatusAgentContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("STATUSES_AGENT_CONTRACT", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Проект"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Действует"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Завершен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Расторгнут"
                        });
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.AgentAgreementEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.AgentEntity", "Agent")
                        .WithMany("AgentAgreements")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceCompany.Storage.Entities.LOBEntity", "LOB")
                        .WithMany("AgentAgreements")
                        .HasForeignKey("LOBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("LOB");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.AgentEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.FaceEntity", "Face")
                        .WithOne("AgentEntity")
                        .HasForeignKey("InsuranceCompany.Storage.Entities.AgentEntity", "FaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceCompany.Storage.Entities.IKPEntity", "IKP")
                        .WithMany("Agents")
                        .HasForeignKey("IKPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceCompany.Storage.Entities.StatusAgentContractEntity", "Status")
                        .WithMany("Agents")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Face");

                    b.Navigation("IKP");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ContractEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.AgentEntity", "Agent")
                        .WithMany("Contracts")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceCompany.Storage.Entities.FaceEntity", "InsuredPerson")
                        .WithMany("InsuredPersonContracts")
                        .HasForeignKey("InsuredPersonId");

                    b.HasOne("InsuranceCompany.Storage.Entities.FaceEntity", "Owner")
                        .WithMany("OwnerContracts")
                        .HasForeignKey("OwnerId");

                    b.HasOne("InsuranceCompany.Storage.Entities.FaceEntity", "PolicyHolder")
                        .WithMany("PolicyHolderContracts")
                        .HasForeignKey("PolicyHolderId");

                    b.HasOne("InsuranceCompany.Storage.Entities.ProductEntity", "Product")
                        .WithMany("Contracts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("InsuredPerson");

                    b.Navigation("Owner");

                    b.Navigation("PolicyHolder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ContractRiskEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.ContractEntity", "Contract")
                        .WithMany("ContractRisks")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.LOBEntity", "LOB")
                        .WithMany("Products")
                        .HasForeignKey("LOBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LOB");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductMetafieldEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.ProductEntity", "Product")
                        .WithMany("ProductMetafield")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductRiskEntity", b =>
                {
                    b.HasOne("InsuranceCompany.Storage.Entities.ProductEntity", "Product")
                        .WithMany("ProductRisks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.AgentEntity", b =>
                {
                    b.Navigation("AgentAgreements");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ContractEntity", b =>
                {
                    b.Navigation("ContractRisks");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.FaceEntity", b =>
                {
                    b.Navigation("AgentEntity")
                        .IsRequired();

                    b.Navigation("InsuredPersonContracts");

                    b.Navigation("OwnerContracts");

                    b.Navigation("PolicyHolderContracts");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.IKPEntity", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.LOBEntity", b =>
                {
                    b.Navigation("AgentAgreements");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.ProductEntity", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("ProductMetafield");

                    b.Navigation("ProductRisks");
                });

            modelBuilder.Entity("InsuranceCompany.Storage.Entities.StatusAgentContractEntity", b =>
                {
                    b.Navigation("Agents");
                });
#pragma warning restore 612, 618
        }
    }
}
